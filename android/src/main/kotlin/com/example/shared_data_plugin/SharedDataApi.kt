// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.example.shared_data_plugin

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object SharedDataApiPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class SharedDataRequest (
  val authority: String? = null,
  val key: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): SharedDataRequest {
      val authority = pigeonVar_list[0] as String?
      val key = pigeonVar_list[1] as String?
      return SharedDataRequest(authority, key)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      authority,
      key,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is SharedDataRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return SharedDataApiPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SharedDataResponse (
  val data: String? = null,
  val fileContent: ByteArray? = null,
  val exists: Boolean? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): SharedDataResponse {
      val data = pigeonVar_list[0] as String?
      val fileContent = pigeonVar_list[1] as ByteArray?
      val exists = pigeonVar_list[2] as Boolean?
      return SharedDataResponse(data, fileContent, exists)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      data,
      fileContent,
      exists,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is SharedDataResponse) {
      return false
    }
    if (this === other) {
      return true
    }
    return SharedDataApiPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class SharedDataApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SharedDataRequest.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SharedDataResponse.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is SharedDataRequest -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is SharedDataResponse -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface SharedDataApi {
  fun getSharedData(request: SharedDataRequest): SharedDataResponse
  fun saveSharedData(request: SharedDataRequest, data: String?, fileContent: ByteArray?)
  fun deleteSharedData(request: SharedDataRequest)
  fun checkSharedData(request: SharedDataRequest): SharedDataResponse

  companion object {
    /** The codec used by SharedDataApi. */
    val codec: MessageCodec<Any?> by lazy {
      SharedDataApiPigeonCodec()
    }
    /** Sets up an instance of `SharedDataApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: SharedDataApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.shared_data_plugin.SharedDataApi.getSharedData$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as SharedDataRequest
            val wrapped: List<Any?> = try {
              listOf(api.getSharedData(requestArg))
            } catch (exception: Throwable) {
              SharedDataApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.shared_data_plugin.SharedDataApi.saveSharedData$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as SharedDataRequest
            val dataArg = args[1] as String?
            val fileContentArg = args[2] as ByteArray?
            val wrapped: List<Any?> = try {
              api.saveSharedData(requestArg, dataArg, fileContentArg)
              listOf(null)
            } catch (exception: Throwable) {
              SharedDataApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.shared_data_plugin.SharedDataApi.deleteSharedData$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as SharedDataRequest
            val wrapped: List<Any?> = try {
              api.deleteSharedData(requestArg)
              listOf(null)
            } catch (exception: Throwable) {
              SharedDataApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.shared_data_plugin.SharedDataApi.checkSharedData$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as SharedDataRequest
            val wrapped: List<Any?> = try {
              listOf(api.checkSharedData(requestArg))
            } catch (exception: Throwable) {
              SharedDataApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
