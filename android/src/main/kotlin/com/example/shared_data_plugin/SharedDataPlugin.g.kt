// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.example.shared_data_plugin

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object SharedDataPluginPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class ShareData (
  val id: String? = null,
  val filePath: String? = null,
  val mimeType: String? = null,
  val metadata: Map<String?, String?>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ShareData {
      val id = pigeonVar_list[0] as String?
      val filePath = pigeonVar_list[1] as String?
      val mimeType = pigeonVar_list[2] as String?
      val metadata = pigeonVar_list[3] as Map<String?, String?>?
      return ShareData(id, filePath, mimeType, metadata)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      filePath,
      mimeType,
      metadata,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is ShareData) {
      return false
    }
    if (this === other) {
      return true
    }
    return SharedDataPluginPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ShareResult (
  val success: Boolean? = null,
  val errorMessage: String? = null,
  val sharedDataId: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ShareResult {
      val success = pigeonVar_list[0] as Boolean?
      val errorMessage = pigeonVar_list[1] as String?
      val sharedDataId = pigeonVar_list[2] as String?
      return ShareResult(success, errorMessage, sharedDataId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      success,
      errorMessage,
      sharedDataId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is ShareResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return SharedDataPluginPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class SharedDataPluginPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ShareData.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ShareResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ShareData -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is ShareResult -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ShareDataApi {
  fun configureAppGroup(appGroupId: String)
  fun shareData(data: ShareData, targetPackage: String?): ShareResult
  fun receiveAll(): List<ShareData>
  fun clearAll()
  fun delete(id: String)

  companion object {
    /** The codec used by ShareDataApi. */
    val codec: MessageCodec<Any?> by lazy {
      SharedDataPluginPigeonCodec()
    }
    /** Sets up an instance of `ShareDataApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: ShareDataApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.shared_data_plugin.ShareDataApi.configureAppGroup$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appGroupIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.configureAppGroup(appGroupIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              SharedDataPluginPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.shared_data_plugin.ShareDataApi.shareData$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as ShareData
            val targetPackageArg = args[1] as String?
            val wrapped: List<Any?> = try {
              listOf(api.shareData(dataArg, targetPackageArg))
            } catch (exception: Throwable) {
              SharedDataPluginPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.shared_data_plugin.ShareDataApi.receiveAll$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.receiveAll())
            } catch (exception: Throwable) {
              SharedDataPluginPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.shared_data_plugin.ShareDataApi.clearAll$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.clearAll()
              listOf(null)
            } catch (exception: Throwable) {
              SharedDataPluginPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.shared_data_plugin.ShareDataApi.delete$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.delete(idArg)
              listOf(null)
            } catch (exception: Throwable) {
              SharedDataPluginPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
